/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { FormControl } from '@angular/forms';
/**
 * @record
 */
export function Styles() { }
/** @type {?|undefined} */
Styles.prototype.fontSize;
/** @type {?|undefined} */
Styles.prototype.backgroundColor;
/** @type {?|undefined} */
Styles.prototype.margin;
var NgRatingBarComponent = /** @class */ (function () {
    function NgRatingBarComponent() {
        this.valueChange = new EventEmitter();
        this.hoverChange = new EventEmitter();
        this.numbers = [];
        this.hoverIndex = -1;
        this.selectedValue = 0;
        this.halfValue = 0;
        this.halfIndex = -1;
        this.isHovered = false;
    }
    /**
     * @return {?}
     */
    NgRatingBarComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.ratingCount = this.ratingCount || 5;
        this.colorActive = this.colorActive || '#edb867';
        this.colorDefault = this.colorDefault || '#d2d2d2';
        if (!this.styles) {
            this.styles = {
                fontSize: '28px',
                backgroundColor: '',
                margin: '5px'
            };
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NgRatingBarComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes["value"] || this.control) {
            this.initNumbers();
            this.calculateHalfValue();
        }
    };
    /**
     * @return {?}
     */
    NgRatingBarComponent.prototype.initNumbers = /**
     * @return {?}
     */
    function () {
        this.numbers = Array(this.ratingCount)
            .fill(0)
            .map(function (x, i) { return i; });
        if (this.control) {
            this.selectedValue = this.control.value;
        }
        else {
            this.selectedValue = this.value;
        }
        this.hoverIndex = this.selectedValue - 1;
    };
    /**
     * @param {?} i
     * @return {?}
     */
    NgRatingBarComponent.prototype.enter = /**
     * @param {?} i
     * @return {?}
     */
    function (i) {
        if (this.disabled) {
            return;
        }
        this.isHovered = true;
        this.hoverIndex = i;
        this.hoverChange.emit(1 + i);
    };
    /**
     * @param {?} i
     * @return {?}
     */
    NgRatingBarComponent.prototype.leave = /**
     * @param {?} i
     * @return {?}
     */
    function (i) {
        if (this.disabled) {
            return;
        }
        this.isHovered = false;
        this.hoverIndex = this.selectedValue - 1;
    };
    /**
     * @param {?} i
     * @return {?}
     */
    NgRatingBarComponent.prototype.setSelected = /**
     * @param {?} i
     * @return {?}
     */
    function (i) {
        if (this.disabled) {
            return;
        }
        if (this.resetAble && this.selectedValue === i + 1) {
            this.selectedValue = 0;
        }
        else {
            this.selectedValue = i + 1;
        }
        if (this.control) {
            this.control.setValue(this.selectedValue || null);
            this.control.markAsTouched();
        }
        else {
            this.valueChange.emit(this.selectedValue);
        }
        this.isHovered = false;
        this.calculateHalfValue();
    };
    /**
     * @return {?}
     */
    NgRatingBarComponent.prototype.calculateHalfValue = /**
     * @return {?}
     */
    function () {
        this.halfValue = Math.round(100 * (this.selectedValue - Math.floor(this.selectedValue)));
        this.halfIndex = Math.ceil(this.selectedValue) - 1;
    };
    NgRatingBarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ng-rating-bar',
                    template: "<ng-container *ngFor=\"let item of numbers; let i = index\">\n  <span\n    class=\"star\"\n    (mouseenter)=\"enter(i)\"\n    (mouseleave)=\"leave(i)\"\n    (click)=\"setSelected(i)\"\n    [ngStyle]=\"{'color': (i <= hoverIndex) ? colorActive : colorDefault}\"\n    [style.fontSize]=\"styles.fontSize\"\n    [style.backgroundColor]=\"styles.backgroundColor\"\n    [style.marginRight]=\"styles.margin\"\n  >\n  \u2605\n  <span\n    class=\"star half\"\n    *ngIf=\"!isHovered && i == halfIndex\"\n    [style.width.%]=\"halfValue\"\n    [style.color]=\"colorActive\"\n  >\u2605</span>\n</span>\n</ng-container>\n",
                    styles: [".star{position:relative}.star:not(.half){min-height:20px;min-width:20px;cursor:pointer;display:inline-block}.star.active{color:inherit}.star.half{height:inherit;font-size:inherit;cursor:pointer;position:absolute;left:0;top:0;display:inline-block;overflow:hidden}"]
                },] },
    ];
    /** @nocollapse */
    NgRatingBarComponent.ctorParameters = function () { return []; };
    NgRatingBarComponent.propDecorators = {
        ratingCount: [{ type: Input }],
        colorActive: [{ type: Input }],
        colorDefault: [{ type: Input }],
        disabled: [{ type: Input }],
        resetAble: [{ type: Input }],
        control: [{ type: Input }],
        styles: [{ type: Input }],
        value: [{ type: Input }],
        valueChange: [{ type: Output }],
        hoverChange: [{ type: Output }]
    };
    return NgRatingBarComponent;
}());
export { NgRatingBarComponent };
if (false) {
    /** @type {?} */
    NgRatingBarComponent.prototype.ratingCount;
    /** @type {?} */
    NgRatingBarComponent.prototype.colorActive;
    /** @type {?} */
    NgRatingBarComponent.prototype.colorDefault;
    /** @type {?} */
    NgRatingBarComponent.prototype.disabled;
    /** @type {?} */
    NgRatingBarComponent.prototype.resetAble;
    /** @type {?} */
    NgRatingBarComponent.prototype.control;
    /** @type {?} */
    NgRatingBarComponent.prototype.styles;
    /** @type {?} */
    NgRatingBarComponent.prototype.value;
    /** @type {?} */
    NgRatingBarComponent.prototype.valueChange;
    /** @type {?} */
    NgRatingBarComponent.prototype.hoverChange;
    /** @type {?} */
    NgRatingBarComponent.prototype.numbers;
    /** @type {?} */
    NgRatingBarComponent.prototype.hoverIndex;
    /** @type {?} */
    NgRatingBarComponent.prototype.selectedValue;
    /** @type {?} */
    NgRatingBarComponent.prototype.halfValue;
    /** @type {?} */
    NgRatingBarComponent.prototype.halfIndex;
    /** @type {?} */
    NgRatingBarComponent.prototype.isHovered;
}

//# sourceMappingURL=data:application/json;base64,