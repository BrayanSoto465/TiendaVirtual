import { Component, Input, Output, EventEmitter, NgModule } from '@angular/core';
import '@angular/forms';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

function NgRatingBarComponent_ng_container_0_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 3);
    ɵngcc0.ɵɵtext(1, "\u2605");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵstyleProp("width", ctx_r3.halfValue, "%")("color", ctx_r3.colorActive);
} }
const _c0 = function (a0) { return { "color": a0 }; };
function NgRatingBarComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "span", 1);
    ɵngcc0.ɵɵlistener("mouseenter", function NgRatingBarComponent_ng_container_0_Template_span_mouseenter_1_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r5); const i_r2 = restoredCtx.index; const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.enter(i_r2); })("mouseleave", function NgRatingBarComponent_ng_container_0_Template_span_mouseleave_1_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r5); const i_r2 = restoredCtx.index; const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.leave(i_r2); })("click", function NgRatingBarComponent_ng_container_0_Template_span_click_1_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r5); const i_r2 = restoredCtx.index; const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.setSelected(i_r2); });
    ɵngcc0.ɵɵtext(2, " \u2605 ");
    ɵngcc0.ɵɵtemplate(3, NgRatingBarComponent_ng_container_0_span_3_Template, 2, 4, "span", 2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const i_r2 = ctx.index;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵstyleProp("font-size", ctx_r0.styles.fontSize)("background-color", ctx_r0.styles.backgroundColor)("margin-right", ctx_r0.styles.margin);
    ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction1(8, _c0, i_r2 <= ctx_r0.hoverIndex ? ctx_r0.colorActive : ctx_r0.colorDefault));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r0.isHovered && i_r2 == ctx_r0.halfIndex);
} }
class NgRatingBarComponent {
    constructor() {
        this.valueChange = new EventEmitter();
        this.hoverChange = new EventEmitter();
        this.numbers = [];
        this.hoverIndex = -1;
        this.selectedValue = 0;
        this.halfValue = 0;
        this.halfIndex = -1;
        this.isHovered = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.ratingCount = this.ratingCount || 5;
        this.colorActive = this.colorActive || '#edb867';
        this.colorDefault = this.colorDefault || '#d2d2d2';
        if (!this.styles) {
            this.styles = {
                fontSize: '28px',
                backgroundColor: '',
                margin: '5px'
            };
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes["value"] || this.control) {
            this.initNumbers();
            this.calculateHalfValue();
        }
    }
    /**
     * @return {?}
     */
    initNumbers() {
        this.numbers = Array(this.ratingCount)
            .fill(0)
            .map((x, i) => i);
        if (this.control) {
            this.selectedValue = this.control.value;
        }
        else {
            this.selectedValue = this.value;
        }
        this.hoverIndex = this.selectedValue - 1;
    }
    /**
     * @param {?} i
     * @return {?}
     */
    enter(i) {
        if (this.disabled) {
            return;
        }
        this.isHovered = true;
        this.hoverIndex = i;
        this.hoverChange.emit(1 + i);
    }
    /**
     * @param {?} i
     * @return {?}
     */
    leave(i) {
        if (this.disabled) {
            return;
        }
        this.isHovered = false;
        this.hoverIndex = this.selectedValue - 1;
    }
    /**
     * @param {?} i
     * @return {?}
     */
    setSelected(i) {
        if (this.disabled) {
            return;
        }
        if (this.resetAble && this.selectedValue === i + 1) {
            this.selectedValue = 0;
        }
        else {
            this.selectedValue = i + 1;
        }
        if (this.control) {
            this.control.setValue(this.selectedValue || null);
            this.control.markAsTouched();
        }
        else {
            this.valueChange.emit(this.selectedValue);
        }
        this.isHovered = false;
        this.calculateHalfValue();
    }
    /**
     * @return {?}
     */
    calculateHalfValue() {
        this.halfValue = Math.round(100 * (this.selectedValue - Math.floor(this.selectedValue)));
        this.halfIndex = Math.ceil(this.selectedValue) - 1;
    }
}
NgRatingBarComponent.ɵfac = function NgRatingBarComponent_Factory(t) { return new (t || NgRatingBarComponent)(); };
NgRatingBarComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: NgRatingBarComponent, selectors: [["ng-rating-bar"]], inputs: { ratingCount: "ratingCount", colorActive: "colorActive", colorDefault: "colorDefault", styles: "styles", disabled: "disabled", resetAble: "resetAble", control: "control", value: "value" }, outputs: { valueChange: "valueChange", hoverChange: "hoverChange" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 1, vars: 1, consts: [[4, "ngFor", "ngForOf"], [1, "star", 3, "ngStyle", "mouseenter", "mouseleave", "click"], ["class", "star half", 3, "width", "color", 4, "ngIf"], [1, "star", "half"]], template: function NgRatingBarComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, NgRatingBarComponent_ng_container_0_Template, 4, 10, "ng-container", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngForOf", ctx.numbers);
    } }, directives: [ɵngcc1.NgForOf, ɵngcc1.NgStyle, ɵngcc1.NgIf], styles: [".star[_ngcontent-%COMP%]{position:relative}.star[_ngcontent-%COMP%]:not(.half){min-height:20px;min-width:20px;cursor:pointer;display:inline-block}.star.active[_ngcontent-%COMP%]{color:inherit}.star.half[_ngcontent-%COMP%]{height:inherit;font-size:inherit;cursor:pointer;position:absolute;left:0;top:0;display:inline-block;overflow:hidden}"] });
/** @nocollapse */
NgRatingBarComponent.ctorParameters = () => [];
NgRatingBarComponent.propDecorators = {
    ratingCount: [{ type: Input }],
    colorActive: [{ type: Input }],
    colorDefault: [{ type: Input }],
    disabled: [{ type: Input }],
    resetAble: [{ type: Input }],
    control: [{ type: Input }],
    styles: [{ type: Input }],
    value: [{ type: Input }],
    valueChange: [{ type: Output }],
    hoverChange: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgRatingBarComponent, [{
        type: Component,
        args: [{
                selector: 'ng-rating-bar',
                template: `<ng-container *ngFor="let item of numbers; let i = index">
  <span
    class="star"
    (mouseenter)="enter(i)"
    (mouseleave)="leave(i)"
    (click)="setSelected(i)"
    [ngStyle]="{'color': (i <= hoverIndex) ? colorActive : colorDefault}"
    [style.fontSize]="styles.fontSize"
    [style.backgroundColor]="styles.backgroundColor"
    [style.marginRight]="styles.margin"
  >
  ★
  <span
    class="star half"
    *ngIf="!isHovered && i == halfIndex"
    [style.width.%]="halfValue"
    [style.color]="colorActive"
  >★</span>
</span>
</ng-container>
`,
                styles: [`.star{position:relative}.star:not(.half){min-height:20px;min-width:20px;cursor:pointer;display:inline-block}.star.active{color:inherit}.star.half{height:inherit;font-size:inherit;cursor:pointer;position:absolute;left:0;top:0;display:inline-block;overflow:hidden}`]
            }]
    }], function () { return []; }, { valueChange: [{
            type: Output
        }], hoverChange: [{
            type: Output
        }], ratingCount: [{
            type: Input
        }], colorActive: [{
            type: Input
        }], colorDefault: [{
            type: Input
        }], styles: [{
            type: Input
        }], disabled: [{
            type: Input
        }], resetAble: [{
            type: Input
        }], control: [{
            type: Input
        }], value: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class NgRatingBarModule {
}
NgRatingBarModule.ɵfac = function NgRatingBarModule_Factory(t) { return new (t || NgRatingBarModule)(); };
NgRatingBarModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: NgRatingBarModule });
NgRatingBarModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[
            CommonModule
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgRatingBarModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule
                ],
                declarations: [NgRatingBarComponent],
                exports: [NgRatingBarComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgRatingBarModule, { declarations: function () { return [NgRatingBarComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [NgRatingBarComponent]; } }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { NgRatingBarModule, NgRatingBarComponent as ɵa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,